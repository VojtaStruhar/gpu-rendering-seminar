#version 450 core

// The size of work group - 256 threads.
layout (local_size_x = 256) in;

// ----------------------------------------------------------------------------
// Input Variables
// ----------------------------------------------------------------------------
// The shader storage buffer with input positions.
layout (std430, binding = 0) buffer PositionsInBuffer
{
	vec4 particle_positions_read[];
};
// The shader storage buffer with velocities.
layout (std430, binding = 2) buffer VelocitiesBuffer
{
	vec4 particle_velocities[];
};

// The particle count.
uniform int current_particle_count;

// The input parameters of the simulation.
uniform float time_delta;
uniform float acceleration_factor;
uniform float distance_threshold;

// ----------------------------------------------------------------------------
// Output Variables
// ----------------------------------------------------------------------------
// The shader storage buffer with output positions.
layout (std430, binding = 1) buffer PositionsOutBuffer
{
	vec4 particle_positions_write[];
};

// ----------------------------------------------------------------------------
// Main Method
// ----------------------------------------------------------------------------
void main()
{
	// TASK 2: Implement n-body simulation on GPU. Each particle is computed by a separate thread.
	//	 Hint: Variables:
	//			particle_positions_read   .. array of vec4, positions of particles to read from
	//			particle_positions_write  .. array of vec4, positions of particles to write into
	//			particle_velocities       .. array of vec4, velocities of particles to read from and to write into
	//			current_particle_count    .. integer, number of active particles in simulation
	//			distance_threshold        .. float, objects closer than this value exert no force to each other
	//			acceleration_factor       .. float, a constant that affects the final acceleration
	//			time_delta                .. float, time elapsed since the last frame of our simulation
	//			gl_GlobalInvocationID.x   .. integer, index of the current thread (global = references all running threads)

	uint i = gl_GlobalInvocationID.x;
	vec4 position = particle_positions_read[i];
	vec4 velocity = particle_velocities[i];
	vec4 accel = vec4(0.0f);

	// Foreach other particle
	for (int j = 0; j < current_particle_count; j++) {
		if (i == j)
		continue;

		vec4 other_pos = particle_positions_read[j];
		vec4 dir = other_pos - position;

		float dist_sq = dot(dir, dir);
		if (dist_sq > distance_threshold) {
			accel += normalize(dir) / dist_sq;
		}
	}

	accel *= acceleration_factor;

	vec4 new_position = position + velocity * time_delta + 0.5f * accel * time_delta * time_delta;
	vec4 new_velocity = velocity + accel * time_delta;

	particle_velocities[i]  = new_velocity;
	particle_positions_write[i] = new_position;
}